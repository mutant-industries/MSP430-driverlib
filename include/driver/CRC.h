/* SPDX-License-Identifier: BSD-3-Clause */
/*
 *  CRC (cyclic redundancy check) module driver, software fallback
 *   - compatible with CRC tables generated by TI compiler and with CRC used by BSL protocol (MSP430 bootloader)
 *
 *  Copyright (c) 2018-2019 Mutant Industries ltd.
 */

#ifndef _DRIVER_CRC_H_
#define _DRIVER_CRC_H_

#include <msp430.h>
#include <stdint.h>
#include <stdbool.h>

// -------------------------------------------------------------------------------------

/**
 * CRC-16 hardware support check
 */
#if defined(__MSP430_HAS_CRC__) && defined(CRC_BASE)

#define __CRC_16_HW_SUPPORT__

/**
 * CRC data in reverse byte, CRC initialization and result register offsets from base
 */
#if ! defined(OFS_CRCDIRB) || ! defined(OFS_CRCINIRES)
#define OFS_CRCDIRB         (0x0002)
#define OFS_CRCINIRES       (0x0004)
#endif

#endif /* CRC-16 hardware support check */

// -------------------------------------------------------------------------------------

#define _CRC_driver_(_driver)               ((CRC_driver_t *) (_driver))

// -------------------------------------------------------------------------------------

/**
 * CRC driver public API access
 */
#define CRC_seed(_driver, _seed) _CRC_driver_(_driver)->seed(_CRC_driver_(_driver), _seed)
#define CRC_consume_byte(_driver, _input) _CRC_driver_(_driver)->consume_byte(_CRC_driver_(_driver), _input)
#define CRC_consume_word(_driver, _input) _CRC_driver_(_driver)->consume_word(_CRC_driver_(_driver), _input)
#define CRC_calculate(_driver, _address, _size, _seed) _CRC_driver_(_driver)->calculate(_CRC_driver_(_driver), _address, _size, _seed)
#define CRC_result(_driver) _CRC_driver_(_driver)->result(_CRC_driver_(_driver))

// -------------------------------------------------------------------------------------

typedef struct CRC_driver CRC_driver_t;

struct CRC_driver {
    // -------- state --------
    // CRC initialization / result of software fallback
    uint16_t _state;

    // -------- public --------
    // initialize CRC module by seed
    //  - linker-generated CRC tables use '0x0000' seed
    //  - BSL protocol (MSP430 bootloader) uses '0xFFFF' seed
    void (*seed)(CRC_driver_t *_this, uint16_t seed);
    // consume 8-bit value
    void (*consume_byte)(CRC_driver_t *_this, uint8_t input);
    // consume 16-bit value
    void (*consume_word)(CRC_driver_t *_this, uint16_t input);
    // calculate checksum of given memory block using given seed
    uint16_t (*calculate)(CRC_driver_t *_this, void *address, uint16_t size, uint16_t seed);
    // get current state of CRC module
    uint16_t (*result)(CRC_driver_t *_this);

};

/**
 * Initialize CRC module driver
 *  - software_fallback if set, then CRC is computed by software
 *    - using hardware CRC module is faster, however it is not thread-safe
 *    - if there is no hardware support then this parameter is ignored and software fallback is always used
 */
void CRC_driver_register(CRC_driver_t *driver, bool software_fallback);


#endif /* _DRIVER_CRC_H_ */
